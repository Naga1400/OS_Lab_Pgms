#include <stdio.h>
#include <stdlib.h>

#define MAX_BLOCKS 100

int disk[MAX_BLOCKS];

int isFree(int start, int length) {
    if (start + length > MAX_BLOCKS) {
        return 0;
    }

    for (int i = start; i < start + length; i++) {
        if (disk[i] == 1) {
            return 0;
        }
    }
    return 1;
}

void allocateFile(int start, int length) {
    if (isFree(start, length)) {
        for (int i = start; i < start + length; i++) {
            disk[i] = 1;
        }
        printf("File allocated from block %d to %d\n", start, start + length - 1);
    } else {
        printf("Cannot allocate file: blocks are already in use or out of range.\n");
    }
}

void displayDisk() {
    printf("Disk status (0 for Free, 1 for Allocated):\n");
    for (int i = 0; i < MAX_BLOCKS; i++) {
        printf("%d ", disk[i]);
        if ((i + 1) % 10 == 0) {
            printf("\n");
        }
    }
}

int main() {
    int choice;
    int startBlock, length;

    for (int i = 0; i < MAX_BLOCKS; i++) {
        disk[i] = 0;
    }

    do {
        printf("\nSequential File Allocation Menu:\n");
        printf("1. Allocate File\n");
        printf("2. Display Disk Status\n");
        printf("3. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter start block (0 to %d): ", MAX_BLOCKS - 1);
                scanf("%d", &startBlock);
                printf("Enter the length (No. of blocks): ");
                scanf("%d", &length);
                allocateFile(startBlock, length);
                break;

            case 2:
                displayDisk();
                break;

            case 3:
                printf("Exiting program...!\n");
                break;

            default:
                printf("Invalid choice! Please try again.\n");
        }
    } while (choice != 3);

    return 0;
}
